generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model TypeUser {
  id   Int    @id @unique @default(autoincrement())
  type String @db.VarChar(15)
  user User[]

  @@map("type_user")
}

model TypeCode {
  id                Int                 @id @default(autoincrement())
  type              String              @db.VarChar(15)
  verification_code Verification_Code[]

  @@map("type_code")
}

model User {
  id                Int                 @id @default(autoincrement())
  email             String              @unique @db.VarChar(50)
  name              String              @db.VarChar(50)
  password          String
  is_verified       Boolean             @default(false)
  type_user_id      Int
  updated_at        DateTime            @updatedAt
  created_at        DateTime            @default(now())
  type_user         TypeUser            @relation(fields: [type_user_id], references: [id])
  verification_code Verification_Code[]
  student           Student?
  teacher           Teacher?

  @@map("user")
}

model Student {
  user_id            Int                  @id @unique
  user               User                 @relation(fields: [user_id], references: [id])
  description        String               @db.VarChar(500)
  enrollment         String               @unique @db.VarChar(10)
  course             Course               @relation(fields: [course_id], references: [id])
  course_id          Int
  contact_email      String               @db.VarChar(50)
  whatsapp           String?              @db.VarChar(11)
  linkedin           String?              @db.VarChar(100)
  ScheduleMonitoring ScheduleMonitoring[]
  Monitor            Monitor[]

  @@map("student")
}

model StatusMonitoring {
  id      Int       @id @default(autoincrement())
  status  String    @db.VarChar(100)
  Monitor Monitor[]

  @@map("status_monitoring")
}

model StatusResponsability {
  id             Int                     @id @default(autoincrement())
  status         String                  @db.VarChar(100)
  Responsability SubjectResponsability[]

  @@map("status_responsability")
}

model StatusScheduleMonitoring {
  id                 Int                  @id @default(autoincrement())
  status             String               @db.VarChar(100)
  ScheduleMonitoring ScheduleMonitoring[]

  @@map("status_schedule_monitoring")
}

model Monitor {
  id                       Int                  @id @default(autoincrement())
  id_status                Int                  @default(1)
  status                   StatusMonitoring     @relation(fields: [id_status], references: [id])
  responsible_professor_id Int
  responsible_professor    Teacher              @relation(fields: [responsible_professor_id], references: [user_id])
  student_id               Int
  student                  Student              @relation(fields: [student_id], references: [user_id])
  subject_id               Int
  subject                  Subject              @relation(fields: [subject_id], references: [id])
  ScheduleMonitoring       ScheduleMonitoring[]
  AvailableTimes           AvailableTimes[]

  @@map("monitor")
}

model AvailableTimes {
  id         Int      @id @default(autoincrement())
  week_day   Int
  start      String
  end        String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  monitor_id Int
  monitor    Monitor  @relation(fields: [monitor_id], references: [id])

  @@map("available_times")
}

model Teacher {
  user_id               Int                     @id
  user                  User                    @relation(fields: [user_id], references: [id])
  SubjectResponsability SubjectResponsability[]
  Monitor               Monitor[]

  @@map("teacher")
}

model Subject {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @db.VarChar(100)
  code                  String                  @unique @db.VarChar(10)
  course_id             Int
  course                Course                  @relation(fields: [course_id], references: [id])
  SubjectResponsability SubjectResponsability[]
  Monitor               Monitor[]

  @@map("subject")
}

model Course {
  id      Int       @id @default(autoincrement())
  name    String    @db.VarChar(100)
  code    String    @unique @db.VarChar(10)
  student Student[]
  subject Subject[]

  @@map("course")
}

model Verification_Code {
  id          Int       @id @default(autoincrement())
  code        String    @unique @db.VarChar(6)
  type        TypeCode  @relation(fields: [type_id], references: [id])
  type_id     Int
  is_verified Boolean   @default(false)
  user        User      @relation(fields: [user_id], references: [id])
  user_id     Int
  updated_at  DateTime? @updatedAt
  created_at  DateTime  @default(now())

  @@map("verification_code")
}

model Coordinator {
  id Int @id @default(autoincrement())

  @@map("coordinators")
}

model SubjectResponsability {
  id           Int                  @id @default(autoincrement())
  id_status    Int                  @default(1)
  status       StatusResponsability @relation(fields: [id_status], references: [id])
  updated_at   DateTime             @updatedAt
  created_at   DateTime             @default(now())
  end_date     DateTime?            
  professor_id Int
  professor    Teacher              @relation(fields: [professor_id], references: [user_id])
  subject_id   Int
  subject      Subject              @relation(fields: [subject_id], references: [id])

  @@map("subject_responsability")
}

model ScheduleMonitoring {
  id         Int                      @id @default(autoincrement())
  start      DateTime
  end        DateTime
  id_status  Int                      @default(1)
  status     StatusScheduleMonitoring @relation(fields: [id_status], references: [id])
  student_id Int
  student    Student                  @relation(fields: [student_id], references: [user_id])
  monitor_id Int
  monitor    Monitor                  @relation(fields: [monitor_id], references: [id])

  @@map("schedule_monitoring")
}
